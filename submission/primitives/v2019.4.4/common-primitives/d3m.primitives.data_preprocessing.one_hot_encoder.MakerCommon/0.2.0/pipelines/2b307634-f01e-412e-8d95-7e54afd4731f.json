{
  "context": "TESTING",
  "created": "2019-02-12T02:10:00.929519Z",
  "id": "2b307634-f01e-412e-8d95-7e54afd4731f",
  "inputs": [
    {
      "name": "inputs"
    }
  ],
  "outputs": [
    {
      "data": "steps.9.produce",
      "name": "output predictions"
    }
  ],
  "schema": "https://metadata.datadrivendiscovery.org/schemas/v0/pipeline.json",
  "steps": [
    {
      "arguments": {
        "inputs": {
          "data": "inputs.0",
          "type": "CONTAINER"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
        "name": "Extract a DataFrame from a Dataset",
        "python_path": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
        "version": "0.3.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.0.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "parse_semantic_types": {
          "data": [
            "http://schema.org/Boolean",
            "http://schema.org/Integer",
            "http://schema.org/Float",
            "https://metadata.datadrivendiscovery.org/types/FloatVector",
            "http://schema.org/DateTime"
          ],
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
        "name": "Parses strings into their types",
        "python_path": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
        "version": "0.5.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.1.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "semantic_types": {
          "data": [
            "https://metadata.datadrivendiscovery.org/types/CategoricalData"
          ],
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
        "name": "Extracts columns by semantic type",
        "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
        "version": "0.2.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.1.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "exclude_columns": {
          "data": [
            0
          ],
          "type": "VALUE"
        },
        "semantic_types": {
          "data": [
            "http://schema.org/Integer",
            "http://schema.org/Float"
          ],
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
        "name": "Extracts columns by semantic type",
        "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
        "version": "0.2.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.0.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "semantic_types": {
          "data": [
            "https://metadata.datadrivendiscovery.org/types/TrueTarget"
          ],
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
        "name": "Extracts columns by semantic type",
        "python_path": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
        "version": "0.2.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.3.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "return_result": {
          "data": "replace",
          "type": "VALUE"
        },
        "use_semantic_types": {
          "data": true,
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
        "name": "sklearn.impute.SimpleImputer",
        "python_path": "d3m.primitives.data_cleaning.imputer.SKlearn",
        "version": "2019.4.4"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.2.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "return_result": {
          "data": "replace",
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "eaec420d-46eb-4ddf-a2cd-b8097345ff3e",
        "name": "One-hot maker",
        "python_path": "d3m.primitives.data_preprocessing.one_hot_encoder.MakerCommon",
        "version": "0.2.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "left": {
          "data": "steps.6.produce",
          "type": "CONTAINER"
        },
        "right": {
          "data": "steps.5.produce",
          "type": "CONTAINER"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
        "name": "Concatenate two dataframes",
        "python_path": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
        "version": "0.2.0"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.7.produce",
          "type": "CONTAINER"
        },
        "outputs": {
          "data": "steps.4.produce",
          "type": "CONTAINER"
        }
      },
      "hyperparams": {
        "return_result": {
          "data": "replace",
          "type": "VALUE"
        },
        "use_semantic_types": {
          "data": true,
          "type": "VALUE"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "1dd82833-5692-39cb-84fb-2455683075f3",
        "name": "sklearn.ensemble.forest.RandomForestClassifier",
        "python_path": "d3m.primitives.classification.random_forest.SKlearn",
        "version": "2019.4.4"
      },
      "type": "PRIMITIVE"
    },
    {
      "arguments": {
        "inputs": {
          "data": "steps.8.produce",
          "type": "CONTAINER"
        },
        "reference": {
          "data": "steps.1.produce",
          "type": "CONTAINER"
        }
      },
      "outputs": [
        {
          "id": "produce"
        }
      ],
      "primitive": {
        "id": "8d38b340-f83f-4877-baaa-162f8e551736",
        "name": "Construct pipeline predictions output",
        "python_path": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
        "version": "0.3.0"
      },
      "type": "PRIMITIVE"
    }
  ]
}
